"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_framework_1 = require("@ionic/cli-framework");
const utils_fs_1 = require("@ionic/utils-fs");
const path = require("path");
const __1 = require("../");
const npm_1 = require("../../utils/npm");
const config_1 = require("./config");
class Integration extends __1.BaseIntegration {
    constructor() {
        super(...arguments);
        this.name = 'capacitor';
        this.summary = `Target native iOS and Android with Capacitor, Ionic's new native layer`;
        this.archiveUrl = undefined;
    }
    get config() {
        return new __1.IntegrationConfig(this.e.project.filePath, { pathPrefix: ['integrations', this.name] });
    }
    add(details) {
        const _super = Object.create(null, {
            add: { get: () => super.add }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let name = this.e.project.config.get('name');
            let packageId = 'io.ionic.starter';
            const options = [];
            if (details.enableArgs) {
                const parsedArgs = cli_framework_1.parseArgs(details.enableArgs);
                name = parsedArgs._[0] || name;
                packageId = parsedArgs._[1] || packageId;
                if (parsedArgs['web-dir']) {
                    options.push('--web-dir', parsedArgs['web-dir']);
                }
            }
            yield this.installCapacitorCore();
            yield this.installCapacitorCLI();
            yield utils_fs_1.mkdirp(details.root);
            yield this.e.shell.run('capacitor', ['init', name, packageId, ...options], { cwd: details.root });
            yield _super.add.call(this, details);
        });
    }
    installCapacitorCore() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [manager, ...managerArgs] = yield npm_1.pkgManagerArgs(this.e.config.get('npmClient'), { command: 'install', pkg: '@capacitor/core' });
            yield this.e.shell.run(manager, managerArgs, { cwd: this.e.project.directory });
        });
    }
    installCapacitorCLI() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [manager, ...managerArgs] = yield npm_1.pkgManagerArgs(this.e.config.get('npmClient'), { command: 'install', pkg: '@capacitor/cli' });
            yield this.e.shell.run(manager, managerArgs, { cwd: this.e.project.directory });
        });
    }
    personalize({ name, packageId }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const conf = new config_1.CapacitorConfig(path.resolve(this.e.project.directory, config_1.CAPACITOR_CONFIG_FILE));
            conf.set('appName', name);
            if (packageId) {
                conf.set('appId', packageId);
            }
        });
    }
    getInfo() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [[capacitorCorePkg, capacitorCorePkgPath], capacitorCLIVersion,] = yield Promise.all([
                this.e.project.getPackageJson('@capacitor/core'),
                this.getCapacitorCLIVersion(),
            ]);
            const info = [
                { group: 'capacitor', key: 'capacitor', flair: 'Capacitor CLI', value: capacitorCLIVersion || 'not installed' },
                { group: 'capacitor', key: '@capacitor/core', value: capacitorCorePkg ? capacitorCorePkg.version : 'not installed', path: capacitorCorePkgPath },
            ];
            return info;
        });
    }
    getCapacitorCLIVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.e.shell.cmdinfo('capacitor', ['--version'], { cwd: this.e.project.directory });
        });
    }
}
exports.Integration = Integration;
