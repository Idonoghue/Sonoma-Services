"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const command_1 = require("../../lib/command");
const errors_1 = require("../../lib/errors");
const executor_1 = require("../../lib/executor");
class RegisterCommand extends command_1.Command {
    getMetadata() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return {
                name: 'register',
                type: 'project',
                summary: 'Register your Product Key with this app',
                options: [
                    {
                        name: 'app-id',
                        summary: 'The Ionic App ID',
                        spec: {
                            value: 'id',
                        },
                    },
                    {
                        name: 'key',
                        summary: 'The Product Key',
                    },
                ],
            };
        });
    }
    run(inputs, options, runinfo) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.project) {
                throw new errors_1.FatalException(`Cannot run ${chalk_1.default.green('ionic enterprise register')} outside a project directory.`);
            }
            const appId = options['app-id'] ? String(options['app-id']) : undefined;
            const key = options['key'] ? String(options['key']) : undefined;
            const extra = ['--'];
            if (key) {
                extra.push('--key', key);
            }
            if (appId) {
                extra.push('--app-id', appId);
            }
            yield executor_1.runCommand(runinfo, ['integrations', 'enable', 'enterprise', ...extra.length > 1 ? extra : []]);
        });
    }
}
exports.RegisterCommand = RegisterCommand;
